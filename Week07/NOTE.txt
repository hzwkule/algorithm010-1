学习笔记

##字典树和并查集

字典树的数据结构
  基本结构
    字典树，即Trie树，又称单词查找树或键树，是一种树形结构。典型应用是用于统计和排序大量的字符串
    （但不限于字符串），所以经常被搜索引擎系统用于文本词频统计。
    
    它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高

字典树的核心思想
  Trie树的核心思想是空间换时间
  利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的

字典树的基本性质
  1.节点本身不存完整词
  2.从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串
  3.每个节点的所有子节点路径代表的字符都不相同

class Trie(object):
  
    def __init__(self):
      self.root = {}
      self.end_of_word = "#"
      
    def insert(self, word):
      node = self.root
      for char in word:
        node = node.setdefault(char, {})
      node[self.end_of_word] = self.end_of_word

    def search(self, word):
      node = self.root
      for char in word:
        if char not in node:
          return False
        node = node[char]
      return self.end_of_word in node

    def startsWith(self, prefix):
      node = self.root
      for char in not in node:
        if char not in node:
          return False
        node = node[char]
      return True

并查集
  组团、配对问题
  
  基本操作
    -makeSet(s):建立一个新的并查集，其中包含s个单元素集合
    -unionSet(x,y):把元素x和元素y所在的集合合并，并要求x和y所在的集合不相交，
     如果相交则不合并
    -find(x):找到元素x所在的集合的代表，该操作也可以用于判断两个元素是否位于同一个集合，
     只要将它们各自的代表比较以下就可以了
     
   def init(p):
    p = [i for i in range(n)]
    
   def union(self, p, i, j):
    p1 = self.parent(p, i)
    p2 = self.parent(p, j)
    p[p1] = p2
    
   def parent(self, p, i):
    root = i
    while p[root] != root:
     root = p[root]
    while p[i] != i: #路径压缩 ？
     x = i; i = p[i]; p[x] = root
    return root
    
高级搜索

  初级搜索
    1.朴素搜索
    2.优化方式：不重复（fibonacci）、剪枝（生成括号问题）
    3.搜索方向：
      DFS，BFS
    
    DFS 递归
    visited = set()
    def dfs(node, visited):
      if node in visited: #terminator
        return
      
      visited.add(node)
      
      #process current node
      for next_node in node.children():
        if not next_node in visited:
          dfs(next_node, visited)
          
      DFS 非递归
      def DFS(self, tree):
        if tree.root is None:
          return []
        
        visited, stack = [], [tree.root]
        
        while stack:
          node = stack.pop()
          visited.add(node)
          
          process(node)
          nodes = generate_related_nodes(node)
          stack.push(nodes)
          
      BFS
      def BFS(graph, start, end):
        queue = []
        queue.append([start])
        visited.add(start)
        
        while queue:
          node = queue.pop()
          visited.add(node)
          
          process(node)
          nodes = generate_related_nodes(node)
          queue.push(nodes)
          
      回溯法
        回溯法采用试错的思想，它尝试分步地去解决一个问题。当找不到答案时会取消上一或几步再试错。
          可能出现两种情况：
            -找到一个可能存在的答案
            -在尝试了所有可能的分布方法后宣告该问题没有答案
          在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算
    
      启发式搜索（Heuristic Search（A*））
        基于BFS代码
        def BFS(graph, start, end):
          queue = []
          queue.append([start])
          visited.add(start)
          
          while queue:
            node = queue.pop()
            visited.add(node)
            
            process(node)
            nodes = generate_related_nodes(node)
            queue.push(nodes)
            
        A* search
        def AstarSearch(graph, start, end):
          pq = collections.priority_queue() #优先级 -> 估价函数
          pq.append([start])
          visited.add(start)
          
          while pq:
            node = pq.pop()
            visited.add(node)
            
            process(node)
            nodes = generate_related_nodes(node)
            unvisited = [node for node in nodes if node not in visited]
            pq.push(unvisited)
        
        估价函数
        启发式函数：h(n)，它用来评价哪些节点最有希望的是一个我们要找的节点，h(n)会返回一个
        非负实数，也可以认为是从节点n的目标节点路径的估计成本。
        
        启发式函数是一种告知搜索方向的方法。它提供了一种明智的方法来猜测哪个邻居节点会导向
        一个目标。
        
        AVL适合读取
        红黑树适合插入删除
       
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
